import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st
import os
import numpy as np
from matplotlib.cm import get_cmap

# --- CONFIGURA√á√ïES DA P√ÅGINA ---
st.set_page_config(
    layout="wide",
    page_title="Clima Brasil: An√°lise de Sazonalidade e Tend√™ncias üáßüá∑",
    initial_sidebar_state="expanded"
)

# Definindo o caminho do arquivo de dados (ajuste conforme a localiza√ß√£o real do seu arquivo)
# Certifique-se de que 'medias_mensais_geo_2020_2025.csv' est√° na pasta 'medias'
caminho_arquivo_unificado = os.path.join('medias', 'medias_mensais_geo_2020_2025.csv')

# --- FUN√á√ÉO PARA CARREGAR E PREPARAR OS DADOS ---
@st.cache_data(show_spinner="Carregando e processando os dados clim√°ticos... ‚è≥")
def carregar_dados(caminho):
    """Carrega e processa o arquivo de dados clim√°ticos."""
    df = pd.read_csv(caminho)
    
    # Mapeamento de abrevia√ß√µes de regi√µes para nomes completos
    mapa_regioes = {
        "CO": "Centro-Oeste",
        "NE": "Nordeste",
        "N": "Norte",
        "S": "Sul",
        "SE": "Sudeste"
    }
    df['Regiao'] = df['Regiao'].apply(lambda x: mapa_regioes.get(x, x)) 
    
    # Calcula a Temp_Media se as colunas de max/min existirem
    if 'TEMPERATURA M√ÅXIMA NA HORA ANT. (AUT) (¬∞C)' in df.columns and \
       'TEMPERATURA M√çNIMA NA HORA ANT. (AUT) (¬∞C)' in df.columns:
        df['Temp_Media'] = (df['TEMPERATURA M√ÅXIMA NA HORA ANT. (AUT) (¬∞C)'] + 
                            df['TEMPERATURA M√çNIMA NA HORA ANT. (AUT) (¬∞C)']) / 2
    elif 'Temp_Media' not in df.columns:
        raise KeyError("Coluna 'Temp_Media' n√£o encontrada e n√£o p√¥de ser calculada a partir das colunas de m√°xima e m√≠nima. Verifique seu CSV.")

    # Converte colunas para num√©rico, tratando erros
    df['M√™s'] = pd.to_numeric(df['M√™s'], errors='coerce')
    df['Ano'] = pd.to_numeric(df['Ano'], errors='coerce')
    df = df.dropna(subset=['M√™s', 'Ano', 'Regiao']) # Remove NAs de colunas essenciais
    
    # Assegurar que os nomes das vari√°veis estejam corretos para o selectbox
    df.rename(columns={
        'PRECIPITA√á√ÉO TOTAL, HOR√ÅRIO (mm)': 'Precipita√ß√£o Total (mm)',
        'RADIACAO GLOBAL (Kj/m¬≤)': 'Radia√ß√£o Global (Kj/m¬≤)'
    }, inplace=True)

    return df

# --- T√çTULO PRINCIPAL E INTRODU√á√ÉO ---
st.title("üå¶Ô∏è Jornada Clim√°tica Regional do Brasil (2020-2025)")
st.markdown("""
<style>
    .big-font {
        font-size:18px !important;
        font-weight: bold;
        color: #2e8b57; /* SeaGreen */
    }
    .medium-font {
        font-size:15px !important;
        color: #4682b4; /* SteelBlue */
    }
    .stSelectbox label {
        font-weight: bold;
        color: #333333;
    }
    .stButton>button {
        background-color: #4CAF50; /* Green */
        color: white;
        padding: 10px 20px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        cursor: pointer;
        border-radius: 8px;
        border: none;
    }
    .stMarkdown h2 {
        color: #0F4C75; /* Darker Blue */
        font-size: 24px;
        border-bottom: 2px solid #0F4C75;
        padding-bottom: 5px;
        margin-top: 30px;
    }
</style>
<p class="big-font">Explore e compreenda as **varia√ß√µes sazonais** e **tend√™ncias anuais** das principais vari√°veis clim√°ticas nas regi√µes do Brasil.</p>
<p class="medium-font">Esta ferramenta interativa permite visualizar padr√µes, identificar anomalias e formular hip√≥teses sobre o clima futuro.</p>
""", unsafe_allow_html=True)

st.markdown("---")

# --- CARREGAMENTO DOS DADOS E TRATAMENTO DE ERROS ---
try:
    df_unificado = carregar_dados(caminho_arquivo_unificado)
    
    # --- INTERFACE DO USU√ÅRIO (BARRA LATERAL) ---
    st.sidebar.header("‚öôÔ∏è Configura√ß√µes da An√°lise")
    
    regioes = sorted(df_unificado['Regiao'].dropna().unique())
    todos_anos_disponiveis = sorted(df_unificado['Ano'].unique())
    meses_disponiveis = sorted(df_unificado['M√™s'].unique())

    # Sele√ß√£o de Regi√£o
    regiao_selecionada = st.sidebar.selectbox(
        "1. üìç **Selecione a Regi√£o:**",
        regioes,
        index=regioes.index("Sul") if "Sul" in regioes else 0 # Define "Sul" como padr√£o
    )

    # Sele√ß√£o de Vari√°vel Clim√°tica
    variaveis = {
        'Temperatura M√©dia (¬∞C)': 'Temp_Media',
        'Precipita√ß√£o Total (mm)': 'Precipita√ß√£o Total (mm)',
        'Radia√ß√£o Global (Kj/m¬≤)': 'Radia√ß√£o Global (Kj/m¬≤)'
    }
    
    # Filtra as vari√°veis para mostrar apenas as colunas que realmente existem no DataFrame
    variaveis_disponiveis = {k: v for k, v in variaveis.items() if v in df_unificado.columns}
    
    if not variaveis_disponiveis:
        st.error("‚ùå Erro: Nenhuma das vari√°veis clim√°ticas esperadas foi encontrada no seu arquivo CSV.")
        st.stop()

    nome_var = st.sidebar.selectbox(
        "2. üå°Ô∏è **Qual Vari√°vel Clim√°tica Analisar?**",
        list(variaveis_disponiveis.keys()),
        index=list(variaveis_disponiveis.keys()).index('Temperatura M√©dia (¬∞C)') if 'Temperatura M√©dia (¬∞C)' in variaveis_disponiveis else 0 # Padr√£o Temperatura
    )
    coluna_var = variaveis_disponiveis[nome_var]
    unidade_var = nome_var.split('(')[-1].replace(')', '') if '(' in nome_var else ''

    # --- VISUALIZA√á√ÉO PRINCIPAL (Sazonalidade Anual) ---
    st.subheader(f"üìä Comparativo Anual de **{nome_var}** na Regi√£o **{regiao_selecionada}**")
    st.markdown("Acompanhe as flutua√ß√µes mensais para cada ano e compare-as com a m√©dia hist√≥rica da regi√£o.")

    # Filtrar dados para a regi√£o selecionada
    df_regiao = df_unificado[df_unificado['Regiao'] == regiao_selecionada].copy() # Usar .copy()

    # Cores para os anos (Esquema de cores 'viridis' ou 'plasma' s√£o bons para tend√™ncias)
    cmap = get_cmap('viridis') # 'viridis' √© mais suave e acess√≠vel
    # Garante que as cores sejam distribu√≠das uniformemente entre os anos dispon√≠veis
    cores_anos = {ano: cmap(i / (len(todos_anos_disponiveis) - 1) if len(todos_anos_disponiveis) > 1 else 1)
                  for i, ano in enumerate(todos_anos_disponiveis)}

    # Criando o gr√°fico
    fig, ax = plt.subplots(figsize=(14, 7)) # Ajustei o tamanho para ficar mais agrad√°vel

    valores_anuais_por_mes = {}
    for ano in todos_anos_disponiveis: # Itera por TODOS os anos para a m√©dia hist√≥rica
        df_ano_regiao = df_regiao[df_regiao['Ano'] == ano].groupby('M√™s')[coluna_var].mean().reindex(range(1, 13))
        if not df_ano_regiao.empty and df_ano_regiao.dropna().any():
            ax.plot(df_ano_regiao.index, df_ano_regiao.values, marker='o', linestyle='-', 
                    color=cores_anos.get(ano, 'gray'), label=str(int(ano)), linewidth=1.5, alpha=0.7)
            valores_anuais_por_mes[ano] = df_ano_regiao.values

    # Calcula e plota a m√©dia hist√≥rica
    df_valores_anuais = pd.DataFrame(valores_anuais_por_mes, index=range(1, 13))
    media_historica_mensal = df_valores_anuais.mean(axis=1)

    ax.plot(media_historica_mensal.index, media_historica_mensal.values, 
            linestyle='--', color='black', label=f'M√©dia Per√≠odo ({int(min(todos_anos_disponiveis))}-{int(max(todos_anos_disponiveis))})', linewidth=2.5, alpha=0.8)

    # Configura√ß√µes do gr√°fico
    ax.set_title(f'Varia√ß√£o Mensal de {nome_var} por Ano em {regiao_selecionada}', fontsize=18, color='#2F4F4F', fontweight='bold')
    ax.set_xlabel('M√™s', fontsize=14)
    ax.set_ylabel(f'{nome_var} ({unidade_var})', fontsize=14)
    ax.set_xticks(range(1, 13))
    ax.set_xticklabels(['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'], fontsize=12)
    ax.grid(True, linestyle=':', alpha=0.7)
    ax.legend(title='Legenda (Ano)', bbox_to_anchor=(1.02, 1), loc='upper left', borderaxespad=0., fontsize=10, title_fontsize='12')
    
    plt.tight_layout()
    st.pyplot(fig)
    
    st.markdown("---")

    # --- NOVA SE√á√ÉO: FORMULA√á√ÉO DE HIP√ìTESES ---
    st.header("üß† Que hip√≥teses sobre o clima futuro podemos formular?")
    st.warning("üö® **Importante:** Esta an√°lise baseia-se em dados de curto prazo (2020-2025). As 'tend√™ncias' e 'hip√≥teses' s√£o exerc√≠cios explorat√≥rios e **N√ÉO s√£o previs√µes clim√°ticas definitivas**. Previs√µes rigorosas exigem s√©ries hist√≥ricas de dados de d√©cadas e modelos clim√°ticos complexos.")

    col1, col2 = st.columns(2)

    with col1:
        # --- HIP√ìTESE 1: AN√ÅLISE DE TEND√äNCIA ANUAL ---
        st.subheader("1. üìà Hip√≥tese de Tend√™ncia Anual")

        # Calcula a m√©dia anual da vari√°vel para a regi√£o
        media_anual = df_regiao.groupby('Ano')[coluna_var].mean().dropna()
        
        if len(media_anual) > 1:
            anos_validos = media_anual.index.astype(int)
            valores_validos = media_anual.values

            # Calcula a linha de tend√™ncia usando regress√£o linear
            slope, intercept = np.polyfit(anos_validos, valores_validos, 1)
            trend_line = slope * anos_validos + intercept
            
            # Gr√°fico de Tend√™ncia
            fig_trend, ax_trend = plt.subplots(figsize=(7, 4)) # Ajuste para caber na coluna
            ax_trend.plot(anos_validos, valores_validos, marker='o', linestyle='-', color='dodgerblue', label='M√©dia Anual Observada')
            ax_trend.plot(anos_validos, trend_line, linestyle='--', color='red', label='Linha de Tend√™ncia', linewidth=2)
            ax_trend.set_title(f'Tend√™ncia Anual de {nome_var} em {regiao_selecionada}', fontsize=14)
            ax_trend.set_xlabel('Ano', fontsize=11)
            ax_trend.set_ylabel(f'M√©dia Anual ({unidade_var})', fontsize=11)
            ax_trend.grid(True, linestyle='--', alpha=0.5)
            ax_trend.legend(fontsize=9)
            plt.tight_layout()
            st.pyplot(fig_trend)

            # Interpreta√ß√£o da tend√™ncia
            if abs(slope) > 0.05: # Limiar para considerar uma tend√™ncia significativa
                tendencia_direcao = "aumento" if slope > 0 else "diminui√ß√£o"
                emoji_tendencia = "üî•" if slope > 0 else "‚ùÑÔ∏è" # Para temperatura/calor
                if nome_var == 'Precipita√ß√£o Total (mm)':
                    emoji_tendencia = "üåßÔ∏è" if slope > 0 else "‚òÄÔ∏è" # Para chuva/seca
                elif nome_var == 'Radia√ß√£o Global (Kj/m¬≤)':
                    emoji_tendencia = "‚òÄÔ∏è" if slope > 0 else "‚òÅÔ∏è" # Para radia√ß√£o/nublado

                st.markdown(f"""
                <div style="background-color:#e6f7ff; padding: 15px; border-radius: 10px; border-left: 5px solid #2196f3; margin-top: 10px;">
                    <p style="font-size:1.05em;">{emoji_tendencia} **Tend√™ncia de {tendencia_direcao.capitalize()}:** Observamos uma tend√™ncia de **{tendencia_direcao}** na {nome_var.lower()} para a regi√£o {regiao_selecionada}. A uma taxa de `{slope:.3f} {unidade_var}/ano`, a hip√≥tese √© que a regi√£o pode enfrentar **condi√ß√µes progressivamente {tendencia_direcao.replace('aumento', 'mais intensas').replace('diminui√ß√£o', 'mais amenas')}** se essa tend√™ncia de curto prazo continuar.
                    </p>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div style="background-color:#fffde7; padding: 15px; border-radius: 10px; border-left: 5px solid #ffeb3b; margin-top: 10px;">
                    <p style="font-size:1.05em;">‚öñÔ∏è **Tend√™ncia de Estabilidade:** A linha de tend√™ncia √© quase plana (`{slope:.3f} {unidade_var}/ano`), sugerindo **relativa estabilidade** na m√©dia anual de {nome_var.lower()} na regi√£o {regiao_selecionada} durante este per√≠odo. A hip√≥tese principal seria a manuten√ß√£o das condi√ß√µes m√©dias atuais, mas com aten√ß√£o √† variabilidade entre os anos.</p>
                </div>
                """, unsafe_allow_html=True)
        else:
            st.info("Dados insuficientes (menos de 2 anos com valores v√°lidos) para calcular uma tend√™ncia anual para esta vari√°vel e regi√£o.")

    with col2:
        # --- HIP√ìTESE 2: AN√ÅLISE DE VARIABILIDADE E EXTREMOS ---
        st.subheader("2. üå™Ô∏è Hip√≥tese de Variabilidade Interanual")
        
        # Calcula o desvio absoluto m√©dio de cada ano em rela√ß√£o √† m√©dia hist√≥rica mensal
        if not df_valores_anuais.empty and not media_historica_mensal.empty:
            desvios_abs_anuais = (df_valores_anuais.subtract(media_historica_mensal, axis=0)).abs().mean()
            desvios_abs_anuais = desvios_abs_anuais.dropna()

            if not desvios_abs_anuais.empty:
                ano_mais_atipico = desvios_abs_anuais.idxmax()
                maior_desvio = desvios_abs_anuais.max()
                
                st.markdown(f"Na Regi√£o **{regiao_selecionada}**, para a vari√°vel **{nome_var}**: ")
                st.markdown(f"""
                <div style="background-color:#ffebee; padding: 15px; border-radius: 10px; border-left: 5px solid #f44336; margin-top: 10px;">
                    <p style="font-size:1.05em;">
                        üî• O ano de **{int(ano_mais_atipico)}** se destaca como o **mais at√≠pico** (ou extremo), com as m√©dias mensais se afastando em m√©dia **{maior_desvio:.2f} {unidade_var}** da m√©dia hist√≥rica do per√≠odo. Isso sugere maior instabilidade clim√°tica neste ano.
                    </p>
                </div>
                """, unsafe_allow_html=True)
                
                st.markdown("""
                **Hip√≥tese de Variabilidade:** Se os anos mais recentes (ex: 2024, 2025) aparecem consistentemente com os maiores desvios, isso pode sugerir que **o clima na regi√£o est√° se tornando mais vari√°vel e propenso a extremos**. Anos que se desviam significativamente da m√©dia (para cima ou para baixo) podem se tornar mais frequentes, impactando planejamento e recursos.
                """)

                st.write("üìä **Ranking de Anos por Desvio (Atipicidade):**")
                desvios_df = pd.DataFrame(desvios_abs_anuais.sort_values(ascending=False), columns=['Desvio M√©dio Absoluto'])
                st.dataframe(desvios_df.style.format("{:.2f}"), use_container_width=True)
            else:
                st.info("N√£o h√° dados de desvio significativos para realizar a an√°lise de variabilidade anual.")
        else:
            st.info("Dados insuficientes para calcular a variabilidade anual (m√©dias mensais ou hist√≥ricas vazias).")

    st.markdown("---")
    st.markdown("üåü Desenvolvido com paix√£o e dados por [Seu Nome/Equipe] üåü")

# --- TRATAMENTO GERAL DE ERROS ---
except FileNotFoundError:
    st.error(f"‚ùå **Erro Cr√≠tico:** O arquivo de dados '{caminho_arquivo_unificado}' n√£o foi encontrado. Por favor, verifique o caminho e a exist√™ncia do arquivo na pasta `medias`.")
    st.info("üí° **Dica:** Certifique-se de que o arquivo `medias_mensais_geo_2020_2025.csv` est√° localizado corretamente na pasta `medias` dentro do seu projeto.")
except KeyError as e:
    st.error(f"‚ùå **Erro de Dados:** A coluna esperada '{e}' n√£o foi encontrada no arquivo CSV. Verifique se o nome da coluna est√° correto e se o arquivo est√° no formato esperado.")
    st.info("üí° **Dica:** O arquivo CSV deve conter colunas como 'Regiao', 'Ano', 'M√™s', e 'Temp_Media' (ou 'TEMPERATURA M√ÅXIMA NA HORA ANT. (AUT) (¬∞C)' e 'TEMPERATURA M√çNIMA NA HORA ANT. (AUT) (¬∞C)' para c√°lculo), al√©m de 'PRECIPITA√á√ÉO TOTAL, HOR√ÅRIO (mm)' e 'RADIACAO GLOBAL (Kj/m¬≤)'.")
except Exception as e:
    st.error(f"üí• **Ops! Ocorreu um erro inesperado:** {e}")
    st.warning("üîÑ **Sugest√£o:** Tente recarregar a p√°gina. Se o problema persistir, pode ser um erro nos dados ou no script. Por favor, entre em contato com o suporte t√©cnico se necess√°rio.")
