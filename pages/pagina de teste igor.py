import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st
import os
import numpy as np
from matplotlib.cm import get_cmap
import textwrap # Import for textwrap.dedent

# --- CONFIGURA√á√ïES DA P√ÅGINA E ESTILO GLOBAL ---
st.set_page_config(
    layout="wide",
    page_title="Clima Brasil: An√°lise de Sazonalidade e Tend√™ncias üáßüá∑",
    initial_sidebar_state="expanded",
    page_icon="üåà" # Um √≠cone divertido para a aba do navegador
)

# Caminho relativo ao arquivo CSV (ajuste se necess√°rio)
caminho_arquivo_unificado = os.path.join("medias", "medias_mensais_geo_2020_2025.csv")

# --- FUN√á√ÉO PARA CARREGAR E PREPARAR OS DADOS ---
@st.cache_data(show_spinner="Carregando e processando os dados clim√°ticos... ‚è≥")
def carregar_dados(caminho):
    """Carrega e processa o arquivo de dados clim√°ticos."""
    df = pd.read_csv(caminho)
    
    # Mapeamento de abrevia√ß√µes de regi√µes para nomes completos
    mapa_regioes = {
        "CO": "Centro-Oeste",
        "NE": "Nordeste",
        "N": "Norte",
        "S": "Sul",
        "SE": "Sudeste"
    }
    df['Regiao'] = df['Regiao'].apply(lambda x: mapa_regioes.get(x, x)) 
    
    # Calcula a Temp_Media se as colunas de max/min existirem
    if 'TEMPERATURA M√ÅXIMA NA HORA ANT. (AUT) (¬∞C)' in df.columns and \
       'TEMPERATURA M√çNIMA NA HORA ANT. (AUT) (¬∞C)' in df.columns:
        df['Temp_Media'] = (df['TEMPERATURA M√ÅXIMA NA HORA ANT. (AUT) (¬∞C)'] + 
                            df['TEMPERATURA M√çNIMA NA HORA ANT. (AUT) (¬∞C)']) / 2
    elif 'Temp_Media' not in df.columns:
        # Se n√£o h√° como calcular e a coluna n√£o existe, o erro ser√° tratado no bloco principal
        pass

    # Converte colunas para num√©rico, tratando erros
    df['M√™s'] = pd.to_numeric(df['M√™s'], errors='coerce')
    df['Ano'] = pd.to_numeric(df['Ano'], errors='coerce')
    df = df.dropna(subset=['M√™s', 'Ano', 'Regiao']) # Remove NAs de colunas essenciais
    
    # Renomear colunas para exibi√ß√£o amig√°vel no selectbox
    df.rename(columns={
        'PRECIPITA√á√ÉO TOTAL, HOR√ÅRIO (mm)': 'Precipita√ß√£o Total (mm)',
        'RADIACAO GLOBAL (Kj/m¬≤)': 'Radia√ß√£o Global (Kj/m¬≤)'
    }, inplace=True)

    return df

# --- T√çTULO PRINCIPAL E INTRODU√á√ÉO ---
st.title("‚òÄÔ∏è Clima Brasil: Uma Viagem Visual por Sazonalidade e Tend√™ncias! üå¶Ô∏è")
st.markdown(textwrap.dedent("""
<style>
    /* Estilos para a fonte grande e m√©dia na introdu√ß√£o */
    .big-font {
        font-size: 20px !important;
        font-weight: bold;
        color: #4CAF50; /* Um verde mais vibrante */
        text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
    }
    .medium-font {
        font-size: 16px !important;
        color: #007BFF; /* Um azul mais claro e vibrante */
    }
    /* Estilos para os selectboxes e bot√µes */
    .stSelectbox label {
        font-weight: bold;
        color: #34495E; /* Azul escuro quase preto */
        font-size: 1.1em;
    }
    .stButton>button {
        background-color: #FF6F61; /* Coral vibrante */
        color: white;
        padding: 10px 20px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        cursor: pointer;
        border-radius: 12px; /* Mais arredondado */
        border: none;
        box-shadow: 2px 2px 5px rgba(0,0,0,0.2);
    }
    .stButton>button:hover {
        background-color: #FF5A4D; /* Um pouco mais escuro ao passar o mouse */
    }
    /* Estilos para os subheaders (subt√≠tulos) */
    h2 {
        color: #2E86C1; /* Azul celeste */
        font-size: 28px;
        border-bottom: 3px solid #2E86C1; /* Borda mais grossa */
        padding-bottom: 8px;
        margin-top: 40px;
        margin-bottom: 20px;
        text-shadow: 0.5px 0.5px 1px rgba(0,0,0,0.1);
    }
    /* Estilos para as caixas de informa√ß√£o */
    .info-box {
        background-color: #e3f2fd; /* Azul claro */
        padding: 20px;
        border-radius: 15px;
        border-left: 8px solid #2196f3; /* Azul prim√°rio */
        margin-top: 15px;
        box-shadow: 3px 3px 8px rgba(0,0,0,0.15);
    }
    .warning-box {
        background-color: #fff3e0; /* Laranja claro */
        padding: 20px;
        border-radius: 15px;
        border-left: 8px solid #ff9800; /* Laranja prim√°rio */
        margin-top: 15px;
        box-shadow: 3px 3px 8px rgba(0,0,0,0.15);
    }
    .error-box {
        background-color: #ffebee; /* Vermelho claro */
        padding: 20px;
        border-radius: 15px;
        border-left: 8px solid #f44336; /* Vermelho prim√°rio */
        margin-top: 15px;
        box-shadow: 3px 3px 8px rgba(0,0,0,0.15);
    }
    .success-box {
        background-color: #e8f5e9; /* Verde claro */
        padding: 20px;
        border-radius: 15px;
        border-left: 8px solid #4CAF50; /* Verde prim√°rio */
        margin-top: 15px;
        box-shadow: 3px 3px 8px rgba(0,0,0,0.15);
    }
</style>
<p class="big-font">‚ú® Prepare-se para uma imers√£o nos padr√µes clim√°ticos do Brasil! ‚ú®</p>
<p class="medium-font">Navegue pelas **varia√ß√µes sazonais** e desvende as **tend√™ncias anuais** das vari√°veis clim√°ticas mais importantes em cada regi√£o. Uma ferramenta interativa para insights e formula√ß√£o de hip√≥teses sobre o nosso clima tropical.</p>
"""), unsafe_allow_html=True)

st.markdown("---") # Linha divis√≥ria para separar visualmente as se√ß√µes

# --- CARREGAMENTO DOS DADOS E TRATAMENTO DE ERROS ---
try:
    df_unificado = carregar_dados(caminho_arquivo_unificado)
    
    # Verifica se a coluna de temperatura m√©dia p√¥de ser criada ou se j√° existia
    if 'Temp_Media' not in df_unificado.columns:
        error_message_temp_media = textwrap.dedent("""
        <div class="error-box">
            ‚ùå <b>Erro Cr√≠tico:</b> A coluna 'Temp_Media' n√£o existe e n√£o p√¥de ser calculada a partir das colunas de m√°xima e m√≠nima.<br>
            Por favor, verifique se seu arquivo CSV cont√©m as colunas <code>'TEMPERATURA M√ÅXIMA NA HORA ANT. (AUT) (¬∞C)'</code> e <code>'TEMPERATURA M√çNIMA NA HORA ANT. (AUT) (¬∞C)'</code> ou uma coluna <code>'Temp_Media'</code> j√° calculada.
        </div>
        """)
        st.error(error_message_temp_media, unsafe_allow_html=True)
        st.stop()

    # --- INTERFACE DO USU√ÅRIO (BARRA LATERAL) ---
    st.sidebar.header("‚öôÔ∏è **Filtros e Configura√ß√µes**")
    
    # Garantir que as regi√µes sejam √∫nicas e ordenadas
    regioes = sorted(df_unificado['Regiao'].dropna().unique())
    todos_anos_disponiveis = sorted(df_unificado['Ano'].dropna().unique())
    # meses_disponiveis n√£o usado diretamente no selectbox, mas pode ser √∫til para debug/expans√µes
    # meses_disponiveis = sorted(df_unificado['M√™s'].dropna().unique())

    # Sele√ß√£o de Regi√£o
    regiao_selecionada = st.sidebar.selectbox(
        "1. üìç **Escolha sua Regi√£o:**",
        regioes,
        index=regioes.index("Sul") if "Sul" in regioes else 0 # Define "Sul" como padr√£o se dispon√≠vel
    )

    # Sele√ß√£o de Vari√°vel Clim√°tica
    variaveis = {
        'Temperatura M√©dia (¬∞C)': 'Temp_Media',
        'Precipita√ß√£o Total (mm)': 'Precipita√ß√£o Total (mm)',
        'Radia√ß√£o Global (Kj/m¬≤)': 'Radia√ß√£o Global (Kj/m¬≤)'
    }
    
    # Filtra as vari√°veis para mostrar apenas as colunas que realmente existem no DataFrame
    variaveis_disponiveis = {k: v for k, v in variaveis.items() if v in df_unificado.columns}
    
    if not variaveis_disponiveis:
        error_message_vars_missing = textwrap.dedent("""
        <div class="error-box">
            ‚ùå <b>Erro:</b> Nenhuma das vari√°veis clim√°ticas esperadas (Temperatura M√©dia, Precipita√ß√£o Total, Radia√ß√£o Global) foi encontrada no seu arquivo CSV.
            Verifique os nomes das colunas!
        </div>
        """)
        st.error(error_message_vars_missing, unsafe_allow_html=True)
        st.stop()

    nome_var = st.sidebar.selectbox(
        "2. üå°Ô∏è **Qual Vari√°vel Clim√°tica Analisar?**",
        list(variaveis_disponiveis.keys()),
        index=list(variaveis_disponiveis.keys()).index('Temperatura M√©dia (¬∞C)') if 'Temperatura M√©dia (¬∞C)' in variaveis_disponiveis else 0 # Padr√£o Temperatura
    )
    coluna_var = variaveis_disponiveis[nome_var]
    unidade_var = nome_var.split('(')[-1].replace(')', '') if '(' in nome_var else ''

    # --- VISUALIZA√á√ÉO PRINCIPAL (Sazonalidade Anual) ---
    st.subheader(f"üìà Sazonalidade Anual de **{nome_var}** na Regi√£o **{regiao_selecionada}**")
    st.markdown("Acompanhe as flutua√ß√µes mensais para cada ano e compare-as com a m√©dia hist√≥rica regional. Observe os ciclos e as varia√ß√µes ano a ano! üßê")

    # Filtrar dados para a regi√£o selecionada
    df_regiao = df_unificado[df_unificado['Regiao'] == regiao_selecionada].copy()

    # Cores para os anos (Esquema de cores 'inferno' √© vibrante e acess√≠vel)
    cmap = get_cmap('inferno') 
    # Garante que as cores sejam distribu√≠das uniformemente entre os anos dispon√≠veis
    cores_anos = {ano: cmap(i / (len(todos_anos_disponiveis) - 1) if len(todos_anos_disponiveis) > 1 else 1)
                  for i, ano in enumerate(todos_anos_disponiveis)}

    # Criando o gr√°fico de sazonalidade
    fig, ax = plt.subplots(figsize=(15, 8)) # Tamanho maior para mais impacto

    valores_anuais_por_mes = {}
    for ano in todos_anos_disponiveis:
        df_ano_regiao = df_regiao[df_regiao['Ano'] == ano].groupby('M√™s')[coluna_var].mean().reindex(range(1, 13))
        if not df_ano_regiao.empty and df_ano_regiao.dropna().any():
            ax.plot(df_ano_regiao.index, df_ano_regiao.values, marker='o', markersize=6, linestyle='-', 
                    color=cores_anos.get(ano, 'lightgray'), label=f'{int(ano)}', linewidth=2, alpha=0.8)
            valores_anuais_por_mes[ano] = df_ano_regiao.values

    # Calcula e plota a m√©dia hist√≥rica
    df_valores_anuais = pd.DataFrame(valores_anuais_por_mes, index=range(1, 13))
    media_historica_mensal = df_valores_anuais.mean(axis=1)

    ax.plot(media_historica_mensal.index, media_historica_mensal.values, 
            linestyle='--', color='black', label=f'M√©dia Hist√≥rica ({int(min(todos_anos_disponiveis))}-{int(max(todos_anos_disponiveis))})', linewidth=3, alpha=0.9)

    # Configura√ß√µes do gr√°fico
    ax.set_title(f'Varia√ß√£o Mensal de {nome_var} por Ano em {regiao_selecionada}', fontsize=20, color='#34495E', fontweight='bold')
    ax.set_xlabel('M√™s', fontsize=15, color='#555555')
    ax.set_ylabel(f'{nome_var} ({unidade_var})', fontsize=15, color='#555555')
    ax.set_xticks(range(1, 13))
    ax.set_xticklabels(['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'], fontsize=12)
    ax.tick_params(axis='x', rotation=45) # Rotaciona labels para evitar sobreposi√ß√£o
    ax.grid(True, linestyle=':', alpha=0.7, color='lightgray')
    ax.legend(title='Anos do Per√≠odo', bbox_to_anchor=(1.02, 1), loc='upper left', borderaxespad=0., fontsize=11, title_fontsize='13', frameon=True, fancybox=True, shadow=True)
    
    plt.tight_layout()
    st.pyplot(fig)
    
    st.markdown("---")

    # --- NOVA SE√á√ÉO: FORMULA√á√ÉO DE HIP√ìTESES ---
    st.header("üß† Que hip√≥teses sobre o clima futuro podemos formular? ü§î")
    warning_message_short_term = textwrap.dedent("""
    <div class="warning-box">
        üö® <b>Importante:</b> Esta an√°lise baseia-se em dados de <b>curto prazo (2020-2025)</b>. As 'tend√™ncias' e 'hip√≥teses' s√£o exerc√≠cios explorat√≥rios e <b>N√ÉO s√£o previs√µes clim√°ticas definitivas</b>. Previs√µes rigorosas exigem s√©ries hist√≥ricas de dados de d√©cadas e modelos clim√°ticos complexos e validados.
    </div>
    """)
    st.warning(warning_message_short_term, unsafe_allow_html=True)

    col1, col2 = st.columns(2)

    with col1:
        # --- HIP√ìTESE 1: AN√ÅLISE DE TEND√äNCIA ANUAL ---
        st.subheader("1. üìà Hip√≥tese de Tend√™ncia Anual")
        st.markdown("Analisamos a m√©dia anual da vari√°vel para identificar se h√° um padr√£o de aumento, diminui√ß√£o ou estabilidade ao longo do tempo. üëÄ")

        # Calcula a m√©dia anual da vari√°vel para a regi√£o
        media_anual = df_regiao.groupby('Ano')[coluna_var].mean().dropna()
        
        if len(media_anual) > 1:
            anos_validos = media_anual.index.astype(int)
            valores_validos = media_anual.values

            # Calcula a linha de tend√™ncia usando regress√£o linear
            slope, intercept = np.polyfit(anos_validos, valores_validos, 1)
            trend_line = slope * anos_validos + intercept
            
            # Gr√°fico de Tend√™ncia
            fig_trend, ax_trend = plt.subplots(figsize=(8, 5)) # Ajuste para caber na coluna e ser mais vis√≠vel
            ax_trend.plot(anos_validos, valores_validos, marker='o', markersize=7, linestyle='-', color='#007BFF', label='M√©dia Anual Observada') # Azul vibrante
            ax_trend.plot(anos_validos, trend_line, linestyle='--', color='#DC3545', label='Linha de Tend√™ncia', linewidth=2.5) # Vermelho intenso
            ax_trend.set_title(f'Tend√™ncia Anual de {nome_var} em {regiao_selecionada}', fontsize=16, color='#34495E')
            ax_trend.set_xlabel('Ano', fontsize=12, color='#555555')
            ax_trend.set_ylabel(f'M√©dia Anual ({unidade_var})', fontsize=12, color='#555555')
            ax_trend.grid(True, linestyle=':', alpha=0.6, color='lightgray')
            ax_trend.legend(fontsize=10)
            plt.tight_layout()
            st.pyplot(fig_trend)

            # Interpreta√ß√£o da tend√™ncia
            if abs(slope) > 0.05: # Limiar para considerar uma tend√™ncia significativa
                tendencia_direcao = "aumento" if slope > 0 else "diminui√ß√£o"
                emoji_tendencia = "üî•" if slope > 0 and nome_var == 'Temperatura M√©dia (¬∞C)' else "‚ùÑÔ∏è" if slope < 0 and nome_var == 'Temperatura M√©dia (¬∞C)' else ""
                if nome_var == 'Precipita√ß√£o Total (mm)':
                    emoji_tendencia = "üåßÔ∏è" if slope > 0 else "‚òÄÔ∏è" # Para chuva/seca
                elif nome_var == 'Radia√ß√£o Global (Kj/m¬≤)':
                    emoji_tendencia = "‚òÄÔ∏è" if slope > 0 else "‚òÅÔ∏è" # Para radia√ß√£o/nublado

                info_message_trend = textwrap.dedent(f"""
                <div class="info-box">
                    {emoji_tendencia} <b>Tend√™ncia de {tendencia_direcao.capitalize()}:</b> Observamos uma tend√™ncia de <b>{tendencia_direcao}</b> na {nome_var.lower()} para a regi√£o {regiao_selecionada}. A uma taxa de <code>{slope:.3f} {unidade_var}/ano</code>, a hip√≥tese √© que a regi√£o pode enfrentar <b>condi√ß√µes progressivamente {tendencia_direcao.replace('aumento', 'mais intensas').replace('diminui√ß√£o', 'mais amenas')}</b> se essa tend√™ncia de curto prazo continuar.
                </div>
                """)
                st.markdown(info_message_trend, unsafe_allow_html=True)
            else:
                success_message_stability = textwrap.dedent(f"""
                <div class="success-box">
                    ‚öñÔ∏è <b>Tend√™ncia de Estabilidade:</b> A linha de tend√™ncia √© quase plana (<code>{slope:.3f} {unidade_var}/ano</code>), sugerindo <b>relativa estabilidade</b> na m√©dia anual de {nome_var.lower()} na regi√£o {regiao_selecionada} durante este per√≠odo. A hip√≥tese principal seria a manuten√ß√£o das condi√ß√µes m√©dias atuais, mas com aten√ß√£o √† variabilidade entre os anos.
                </div>
                """)
                st.markdown(success_message_stability, unsafe_allow_html=True)
        else:
            st.info("Dados insuficientes (menos de 2 anos com valores v√°lidos) para calcular uma tend√™ncia anual para esta vari√°vel e regi√£o. üìä")

    with col2:
        # --- HIP√ìTESE 2: AN√ÅLISE DE VARIABILIDADE E EXTREMOS ---
        st.subheader("2. üå™Ô∏è Hip√≥tese de Variabilidade Interanual")
        st.markdown("Compreenda qu√£o 'est√°veis' ou 'vol√°teis' foram os anos em rela√ß√£o √† m√©dia hist√≥rica mensal. Anos com grandes desvios podem indicar eventos clim√°ticos extremos. üí•")
        
        # Calcula o desvio absoluto m√©dio de cada ano em rela√ß√£o √† m√©dia hist√≥rica mensal
        if not df_valores_anuais.empty and not media_historica_mensal.empty:
            desvios_abs_anuais = (df_valores_anuais.subtract(media_historica_mensal, axis=0)).abs().mean()
            desvios_abs_anuais = desvios_abs_anuais.dropna()

            if not desvios_abs_anuais.empty:
                ano_mais_atipico = desvios_abs_anuais.idxmax()
                maior_desvio = desvios_abs_anuais.max()
                
                error_message_atypical_year = textwrap.dedent(f"""
                <div class="error-box">
                    üî• Na Regi√£o <b>{regiao_selecionada}</b>, para a vari√°vel <b>{nome_var}</b>, o ano de <b>{int(ano_mais_atipico)}</b> se destaca como o <b>mais at√≠pico</b> (ou extremo), com as m√©dias mensais se afastando em m√©dia <b>{maior_desvio:.2f} {unidade_var}</b> da m√©dia hist√≥rica do per√≠odo. Isso pode sugerir maior instabilidade clim√°tica neste ano.
                </div>
                """)
                st.markdown(error_message_atypical_year, unsafe_allow_html=True)
                
                hypothesis_variability_text = textwrap.dedent("""
                <b>Hip√≥tese de Variabilidade:</b> Se os anos mais recentes (ex: 2024, 2025) aparecem consistentemente com os maiores desvios, isso pode sugerir que <b>o clima na regi√£o est√° se tornando mais vari√°vel e propenso a extremos</b>. Anos que se desviam significativamente da m√©dia (para cima ou para baixo) podem se tornar mais frequentes, impactando planejamento e recursos. üåç
                """)
                st.markdown(hypothesis_variability_text, unsafe_allow_html=True)

                st.write("üìä **Ranking de Anos por Desvio (Atipicidade):**")
                desvios_df = pd.DataFrame(desvios_abs_anuais.sort_values(ascending=False), columns=['Desvio M√©dio Absoluto'])
                st.dataframe(desvios_df.style.format("{:.2f}").set_properties(**{'background-color': '#f2f2f2', 'color': 'black'}), use_container_width=True)
            else:
                st.info("N√£o h√° dados de desvio significativos para realizar a an√°lise de variabilidade anual. üìâ")
        else:
            st.info("Dados insuficientes para calcular a variabilidade anual (m√©dias mensais ou hist√≥ricas vazias). üßê")

    st.markdown("---")
    st.markdown("üåü Desenvolvido com paix√£o e dados para uma jornada clim√°tica inesquec√≠vel! Por [Seu Nome/Equipe] üöÄ")

# --- TRATAMENTO GERAL DE ERROS ---
except FileNotFoundError:
    file_not_found_error_message = textwrap.dedent(f"""
    <div class="error-box">
        ‚ùå <b>Erro Cr√≠tico:</b> O arquivo de dados <code>'{caminho_arquivo_unificado}'</code> n√£o foi encontrado.<br>
        Por favor, verifique o caminho e a exist√™ncia do arquivo na pasta <code>medias</code>.
        <br>üí° <b>Dica:</b> Certifique-se de que o arquivo <code>medias_mensais_geo_2020_2025.csv</code> est√° localizado corretamente na pasta <code>medias</code> dentro do seu projeto.
    </div>
    """)
    st.error(file_not_found_error_message, unsafe_allow_html=True)
except KeyError as e:
    key_error_message = textwrap.dedent(f"""
    <div class="error-box">
        ‚ùå <b>Erro de Coluna:</b> A coluna esperada <code>'{e}'</code> n√£o foi encontrada no arquivo CSV.<br>
        Verifique se o nome da coluna est√° correto e se o arquivo est√° no formato esperado.
        <br>üí° <b>Dica:</b> O arquivo CSV deve conter colunas como 'Regiao', 'Ano', 'M√™s', e 'Temp_Media' (ou 'TEMPERATURA M√ÅXIMA NA HORA ANT. (AUT) (¬∞C)' e 'TEMPERATURA M√çNIMA NA HORA ANT. (AUT) (¬∞C)' para c√°lculo), al√©m de 'PRECIPITA√á√ÉO TOTAL, HOR√ÅRIO (mm)' e 'RADIACAO GLOBAL (Kj/m¬≤)'.
    </div>
    """)
    st.error(key_error_message, unsafe_allow_html=True)
except Exception as e:
    generic_error_message = textwrap.dedent(f"""
    <div class="error-box">
        üí• <b>Ops! Ocorreu um erro inesperado:</b> {e}<br>
        üîÑ <b>Sugest√£o:</b> Tente recarregar a p√°gina. Se o problema persistir, pode ser um erro nos dados ou no script. Por favor, entre em contato com o suporte t√©cnico se necess√°rio.
    </div>
    """)
    st.error(generic_error_message, unsafe_allow_html=True)
