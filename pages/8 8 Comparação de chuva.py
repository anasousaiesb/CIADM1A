import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st
import os
import numpy as np

# --- T√çTULO FOI ALTERADO PARA REFLETIR O TEMA ---
st.title("Comparativo de Precipita√ß√£o: Norte vs. Sul (2020-2025)")

@st.cache_data
def carregar_dados(caminho):
    """
    Carrega os dados do arquivo CSV, valida colunas e realiza o pr√©-processamento.
    """
    df = pd.read_csv(caminho)
    
    # Valida√ß√£o crucial para garantir que a coluna de precipita√ß√£o existe
    coluna_precipitacao = 'PRECIPITA√á√ÉO TOTAL, HOR√ÅRIO (mm)'
    if coluna_precipitacao not in df.columns:
        raise KeyError(f"A coluna necess√°ria '{coluna_precipitacao}' n√£o foi encontrada no arquivo CSV.")

    # Garante que as colunas importantes s√£o num√©ricas
    df['M√™s'] = pd.to_numeric(df['M√™s'], errors='coerce')
    df['Ano'] = pd.to_numeric(df['Ano'], errors='coerce')
    
    # Remove linhas onde os dados essenciais s√£o nulos
    df = df.dropna(subset=['M√™s', 'Ano', 'Regiao', coluna_precipitacao])
    return df

try:
    # Caminho do arquivo
    caminho_arquivo_unificado = os.path.join("medias", "medias_mensais_geo_2020_2025.csv")
    df_unificado = carregar_dados(caminho_arquivo_unificado)

    # --- FILTROS NA BARRA LATERAL ---
    st.sidebar.header("Filtros")

    # Filtro de Anos
    anos_disponiveis = sorted(df_unificado['Ano'].unique().astype(int))
    anos_selecionados = st.sidebar.multiselect(
        "Selecione os Anos para An√°lise:",
        options=anos_disponiveis,
        default=anos_disponiveis # Todos os anos selecionados por padr√£o
    )

    if not anos_selecionados:
        st.warning("Por favor, selecione pelo menos um ano para continuar.")
        st.stop()
        
    # --- PREPARA√á√ÉO DOS DADOS FOCADA NA COMPARA√á√ÉO ---
    regioes_para_comparar = ['Norte', 'Sul']
    coluna_var = 'PRECIPITA√á√ÉO TOTAL, HOR√ÅRIO (mm)'
    
    df_filtrado = df_unificado[
        df_unificado['Regiao'].isin(regioes_para_comparar) &
        df_unificado['Ano'].isin(anos_selecionados)
    ]
    
    # --- AJUSTE: VERIFICA√á√ÉO SE EXISTEM DADOS PARA PLOTAR ---
    if df_filtrado.empty:
        st.error("N√£o foram encontrados dados de precipita√ß√£o para a combina√ß√£o de filtros selecionada (Regi√µes Norte/Sul e anos escolhidos).")
        st.info("Por favor, verifique se os anos selecionados cont√™m dados para as Regi√µes Norte e Sul no seu arquivo CSV.")
        st.stop()

    # --- GR√ÅFICO COMPARATIVO √öNICO ---
    st.header("Varia√ß√£o M√©dia Mensal da Precipita√ß√£o")

    fig, ax = plt.subplots(figsize=(12, 7))
    
    cores_regiao = {'Norte': '#0077b6', 'Sul': '#d9534f'}
    dados_volume = {}

    for regiao in regioes_para_comparar:
        df_regiao_filtrada = df_filtrado[df_filtrado['Regiao'] == regiao]
        if not df_regiao_filtrada.empty:
            media_mensal_regiao = df_regiao_filtrada.groupby('M√™s')[coluna_var].mean().reindex(range(1, 13))
            
            volume_anual = media_mensal_regiao.sum()
            dados_volume[regiao] = f"{volume_anual:,.0f} mm/ano".replace(",",".")

            ax.plot(media_mensal_regiao.index, media_mensal_regiao.values, 
                    marker='o', linestyle='-', color=cores_regiao[regiao], label=f'Regi√£o {regiao}', linewidth=2.5)

    ax.set_title("M√©dia Mensal de Precipita√ß√£o (Norte vs. Sul)", fontsize=16)
    ax.set_xlabel("M√™s", fontsize=12)
    ax.set_ylabel("Precipita√ß√£o M√©dia Mensal (mm)", fontsize=12)
    ax.set_xticks(range(1, 13))
    ax.set_xticklabels(['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'])
    ax.grid(True, which='both', linestyle='--', linewidth=0.5)
    ax.legend(fontsize=12)
    st.pyplot(fig)
    
    # --- AN√ÅLISE E JUSTIFICATIVA DAS DIFEREN√áAS ---
    st.header("An√°lise e Justificativa Clim√°tica")

    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üå¶Ô∏è Regi√£o Norte")
        st.metric(label="Volume M√©dio Anual", value=dados_volume.get('Norte', 'N/D'))
        st.markdown("""
        - **Regime de Chuvas:** Caracterizado por **elevados volumes** e uma sazonalidade bem definida.
        - **Pico (Inverno Amaz√¥nico):** Ocorre tipicamente no **primeiro semestre** (pico entre Fev-Abr). Este per√≠odo de chuvas intensas √© causado pela forte atua√ß√£o da **Zona de Converg√™ncia Intertropical (ZCIT)**.
        - **Per√≠odo mais seco:** Ocorre no **segundo semestre**. N√£o √© uma seca completa, mas uma redu√ß√£o significativa das chuvas, quando a ZCIT se desloca para o hemisf√©rio norte.
        - **Fator Principal:** A **floresta amaz√¥nica** contribui com imensa umidade para a atmosfera (evapotranspira√ß√£o), potencializando as chuvas.
        """)

    with col2:
        st.subheader("üå¨Ô∏è Regi√£o Sul")
        st.metric(label="Volume M√©dio Anual", value=dados_volume.get('Sul', 'N/D'))
        st.markdown("""
        - **Regime de Chuvas:** √â a regi√£o com a chuva **melhor distribu√≠da ao longo do ano** no Brasil. N√£o h√° uma esta√ß√£o seca definida.
        - **Picos e Secas:** As chuvas s√£o majoritariamente provocadas pela passagem de **sistemas frontais (frentes frias)**, que s√£o frequentes durante todo o ano.
        - **Variabilidade:** O volume de chuva √© muito influenciado por fen√¥menos como **El Ni√±o** (que tende a aumentar as chuvas) e **La Ni√±a** (que pode causar secas ou "estiagens" severas).
        - **Fator Principal:** A **localiza√ß√£o em latitude m√©dia** (clima subtropical) a torna suscet√≠vel ao encontro de massas de ar frio e quente, gerando instabilidade e chuvas constantes.
        """)

except KeyError as e:
    st.error(f"Erro de Coluna: {e}. Verifique se o nome da coluna est√° correto no seu arquivo CSV.")
except FileNotFoundError:
    st.error(f"Erro de Arquivo: O arquivo no caminho '{caminho_arquivo_unificado}' n√£o foi encontrado.")
except Exception as e:
    st.error(f"Ocorreu um erro inesperado: {e}")
